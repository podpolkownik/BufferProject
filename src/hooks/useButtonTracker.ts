import { useEffect, useCallback } from 'react';
import { sendAbandonedLeadNotification, AbandonedLeadData } from '../utils/telegram';

interface ButtonTrackingData {
  buttonText: string;
  context: string;
  timestamp: number;
  sessionId: string;
  pageUrl: string;
  userAgent: string;
}

export const useButtonTracker = () => {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
  const generateSessionId = useCallback(() => {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  const trackButtonClick = useCallback((buttonText: string, context: string) => {
    console.log('üéØ Button clicked:', buttonText, 'Context:', context);
    
    const sessionId = generateSessionId();
    const trackingData: ButtonTrackingData = {
      buttonText,
      context,
      timestamp: Date.now(),
      sessionId,
      pageUrl: window.location.href,
      userAgent: navigator.userAgent
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–∫–µ –≤ localStorage
    const pendingClicks = JSON.parse(localStorage.getItem('betsignal_pending_clicks') || '[]');
    pendingClicks.push(trackingData);
    
    // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∫–ª–∏–∫–æ–≤
    if (pendingClicks.length > 20) {
      pendingClicks.splice(0, pendingClicks.length - 20);
    }
    
    localStorage.setItem('betsignal_pending_clicks', JSON.stringify(pendingClicks));
    
    console.log('üíæ Button click saved to localStorage:', trackingData);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    setTimeout(() => {
      checkAndSendAbandonedNotification(sessionId, trackingData);
    }, 60000); // 1 –º–∏–Ω—É—Ç–∞
    
  }, [generateSessionId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞)
  const markAsConverted = useCallback((sessionId?: string) => {
    console.log('‚úÖ Marking as converted, session:', sessionId);
    
    if (sessionId) {
      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é
      const convertedSessions = JSON.parse(localStorage.getItem('betsignal_converted_sessions') || '[]');
      convertedSessions.push(sessionId);
      localStorage.setItem('betsignal_converted_sessions', JSON.stringify(convertedSessions));
    } else {
      // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–∫–∏ –∫–∞–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
      const pendingClicks = JSON.parse(localStorage.getItem('betsignal_pending_clicks') || '[]');
      const convertedSessions = JSON.parse(localStorage.getItem('betsignal_converted_sessions') || '[]');
      
      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–ª–∏–∫–æ–≤ –∏ –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
      const recentClicks = pendingClicks.slice(-5);
      recentClicks.forEach((click: ButtonTrackingData) => {
        convertedSessions.push(click.sessionId);
      });
      
      localStorage.setItem('betsignal_converted_sessions', JSON.stringify(convertedSessions));
    }
    
    console.log('‚úÖ Conversion marked successfully');
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞–≤—à–µ–º—Å—è –ª–∏–¥–µ
  const checkAndSendAbandonedNotification = useCallback(async (sessionId: string, trackingData: ButtonTrackingData) => {
    console.log('üîç Checking abandoned lead for session:', sessionId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const convertedSessions = JSON.parse(localStorage.getItem('betsignal_converted_sessions') || '[]');
    if (convertedSessions.includes(sessionId)) {
      console.log('‚úÖ User converted, skipping abandoned notification');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    const sentNotifications = JSON.parse(localStorage.getItem('betsignal_sent_notifications') || '[]');
    if (sentNotifications.includes(sessionId)) {
      console.log('üö´ Notification already sent for this session');
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –∫–ª–∏–∫–∞
    const timeSpent = Math.floor((Date.now() - trackingData.timestamp) / 1000);
    
    console.log('üì§ Sending abandoned lead notification...');
    console.log('Button:', trackingData.buttonText);
    console.log('Context:', trackingData.context);
    console.log('Time since click:', timeSpent, 'seconds');
    
    const leadData: AbandonedLeadData = {
      context: `${trackingData.context} (button: ${trackingData.buttonText})`,
      timestamp: new Date().toISOString(),
      timeSpent,
      userAgent: trackingData.userAgent,
      pageUrl: trackingData.pageUrl,
      sessionId
    };

    try {
      const success = await sendAbandonedLeadNotification(leadData);
      if (success) {
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        sentNotifications.push(sessionId);
        localStorage.setItem('betsignal_sent_notifications', JSON.stringify(sentNotifications));
        
        console.log('‚úÖ Abandoned lead notification sent successfully');
      }
    } catch (error) {
      console.error('‚ùå Failed to send abandoned lead notification:', error);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const processPendingNotifications = useCallback(async () => {
    const pendingClicks = JSON.parse(localStorage.getItem('betsignal_pending_clicks') || '[]');
    
    if (pendingClicks.length === 0) return;
    
    console.log(`üì§ Processing ${pendingClicks.length} pending clicks...`);
    
    const convertedSessions = JSON.parse(localStorage.getItem('betsignal_converted_sessions') || '[]');
    const sentNotifications = JSON.parse(localStorage.getItem('betsignal_sent_notifications') || '[]');
    const now = Date.now();
    
    for (const click of pendingClicks) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫–∏ –º–ª–∞–¥—à–µ 1 –º–∏–Ω—É—Ç—ã
      if (now - click.timestamp < 60000) {
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
      if (now - click.timestamp > 24 * 60 * 60 * 1000) {
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      if (convertedSessions.includes(click.sessionId)) {
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
      if (sentNotifications.includes(click.sessionId)) {
        continue;
      }
      
      await checkAndSendAbandonedNotification(click.sessionId, click);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    const filteredClicks = pendingClicks.filter((click: ButtonTrackingData) => 
      now - click.timestamp < 24 * 60 * 60 * 1000
    );
    localStorage.setItem('betsignal_pending_clicks', JSON.stringify(filteredClicks));
    
  }, [checkAndSendAbandonedNotification]);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    processPendingNotifications();
  }, [processPendingNotifications]);

  return {
    trackButtonClick,
    markAsConverted
  };
};

export default useButtonTracker;